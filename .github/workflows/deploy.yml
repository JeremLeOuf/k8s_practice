name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy or destroy)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: latest
  SKIP_IMPORT: false  # Temporarily false to import existing resources, then set to true for fast deployments

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: serverless-app
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Terraform Format Check
      working-directory: ./infrastructure
      run: terraform fmt -check -diff
      continue-on-error: true
    
    - name: Terraform Validate
      working-directory: ./infrastructure
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: terraform plan -detailed-exitcode
      continue-on-error: true

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Lambda Packages
      uses: actions/cache@v3
      id: lambda-cache
      with:
        path: |
          lambda-functions/**/*/function.zip
        key: lambda-${{ runner.os }}-${{ hashFiles('lambda-functions/**/*.py', 'lambda-functions/**/requirements.txt') }}
    
    - name: Build Lambda Functions (Optimized)
      if: steps.lambda-cache.outputs.cache-hit != 'true'
      run: |
        chmod +x scripts/build-lambda.sh
        ./scripts/build-lambda.sh
        
        echo "üìä Package sizes:"
        du -h lambda-functions/**/*/function.zip
    
    - name: Verify Lambda Packages
      run: |
        ls -lah lambda-functions/**/*/function.zip
        TOTAL_SIZE=$(du -ch lambda-functions/**/*/function.zip | tail -1)
        echo "‚úÖ Lambda packages ready ($TOTAL_SIZE)"
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Cleanup Old CloudFront Distributions
      if: env.SKIP_IMPORT != 'true'
      run: |
        echo "üßπ Cleaning up old CloudFront distributions..."
        chmod +x scripts/cleanup-old-cloudfront.sh
        ./scripts/cleanup-old-cloudfront.sh || echo "‚ö†Ô∏è Cleanup failed, continuing..."
      continue-on-error: true

    - name: Ensure CloudFront is Enabled
      if: env.SKIP_IMPORT != 'true'
      run: |
        echo "‚úÖ Ensuring CloudFront distribution is enabled..."
        chmod +x scripts/ensure-cloudfront-enabled.sh
        ./scripts/ensure-cloudfront-enabled.sh || echo "‚ö†Ô∏è Enable check failed, continuing..."
      continue-on-error: true

    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources (Skip if in state)
      if: env.SKIP_IMPORT != 'true'
      working-directory: ./infrastructure
      run: |
        echo "üîç Checking and importing existing resources..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Lambda Functions (CRITICAL - prevents hanging!)
        echo "‚ö° Importing Lambda functions..."
        terraform state show aws_lambda_function.get_items &>/dev/null || terraform import aws_lambda_function.get_items pkb-api-get-items 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_function.create_item &>/dev/null || terraform import aws_lambda_function.create_item pkb-api-create-item 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_function.delete_item &>/dev/null || terraform import aws_lambda_function.delete_item pkb-api-delete-item 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_function.add_transaction &>/dev/null || terraform import aws_lambda_function.add_transaction budget-tracker-add-transaction 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_function.get_balance &>/dev/null || terraform import aws_lambda_function.get_balance budget-tracker-get-balance 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # Lambda Permissions
        echo "üîê Importing Lambda permissions..."
        terraform state show aws_lambda_permission.api_gateway_get_items &>/dev/null || terraform import aws_lambda_permission.api_gateway_get_items pkb-api-get-items/AllowExecutionFromAPIGateway 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_permission.api_gateway_create_item &>/dev/null || terraform import aws_lambda_permission.api_gateway_create_item pkb-api-create-item/AllowExecutionFromAPIGateway 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_permission.api_gateway_delete_item &>/dev/null || terraform import aws_lambda_permission.api_gateway_delete_item pkb-api-delete-item/AllowExecutionFromAPIGateway 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_permission.api_gateway_add_transaction &>/dev/null || terraform import aws_lambda_permission.api_gateway_add_transaction budget-tracker-add-transaction/AllowExecutionFromAPIGateway 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_lambda_permission.api_gateway_get_balance &>/dev/null || terraform import aws_lambda_permission.api_gateway_get_balance budget-tracker-get-balance/AllowExecutionFromAPIGateway 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # DynamoDB Tables
        echo "üì¶ Importing DynamoDB tables..."
        terraform state show aws_dynamodb_table.knowledge_base &>/dev/null || terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_dynamodb_table.budget_tracker &>/dev/null || terraform import aws_dynamodb_table.budget_tracker BudgetTracker 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # IAM Roles
        echo "üîë Importing IAM roles..."
        terraform state show aws_iam_role.lambda_role &>/dev/null || terraform import aws_iam_role.lambda_role pkb-lambda-execution-role 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        terraform state show aws_iam_role.budget_tracker_lambda &>/dev/null || terraform import aws_iam_role.budget_tracker_lambda budget-tracker-lambda-role 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # IAM Policies
        echo "üìù Importing IAM policies..."
        terraform state show aws_iam_policy.grafana_cloudwatch_access &>/dev/null || terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # IAM User
        echo "üë§ Importing IAM users..."
        terraform state show aws_iam_user.grafana_cloudwatch &>/dev/null || terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # S3 Bucket
        echo "ü™£ Importing S3 bucket..."
        terraform state show aws_s3_bucket.frontend &>/dev/null || terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base 2>/dev/null || echo "‚ö†Ô∏è Skipped"
        
        # CloudFront Distribution (if exists)
        echo "‚òÅÔ∏è Checking for existing CloudFront distributions..."
        DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='Personal Knowledge Base Frontend' && Status=='Deployed'].Id | [0]" --output text 2>/dev/null || echo "")
        if [ -n "$DIST_ID" ] && [ "$DIST_ID" != "null" ]; then
          echo "‚òÅÔ∏è Found existing CloudFront distribution: $DIST_ID"
          terraform state show aws_cloudfront_distribution.frontend &>/dev/null || terraform import aws_cloudfront_distribution.frontend "$DIST_ID" 2>/dev/null || echo "‚ö†Ô∏è Skipped CloudFront import"
        fi
        
        echo "‚úÖ Import check completed"
      continue-on-error: true
    
    - name: Skip Import (Fast Mode)
      if: env.SKIP_IMPORT == 'true'
      run: |
        echo "‚ö° Fast mode: Skipping resource import step"
        echo "üí° Set env.SKIP_IMPORT to false to enable imports"
      continue-on-error: true
    
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: |
        echo "üìã Running terraform plan to see what will change..."
        terraform plan -refresh=false
      continue-on-error: true
    
    - name: Terraform Plan (for optimization checks)
      working-directory: ./infrastructure
      run: |
        echo "üìã Running terraform plan for optimization checks..."
        terraform plan -out=tfplan -refresh=false -parallelism=10 > plan.txt 2>&1 || true
        cat plan.txt
        
        # Check if CloudFront will be created (not just updated)
        if grep -q "aws_cloudfront_distribution.frontend will be created" plan.txt; then
          echo "üÜï New CloudFront distribution detected"
          echo "NEW_CLOUDFRONT=true" >> $GITHUB_ENV
        else
          echo "‚úÖ CloudFront will be updated (not created)"
          echo "NEW_CLOUDFRONT=false" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Terraform Apply (No Refresh)
      working-directory: ./infrastructure
      run: |
        echo "‚è±Ô∏è Starting terraform apply at $(date)"
        if [ -f tfplan ]; then
          time terraform apply tfplan
          rm -f plan.txt
        else
          time terraform apply -auto-approve -refresh=false -parallelism=10
        fi
        echo "‚úÖ Completed terraform apply at $(date)"
    
    - name: Check if Frontend Changed
      run: |
        # Check if this is the first commit or if frontend changed
        if [ "$(git rev-list --count HEAD)" -eq 1 ]; then
          echo "üÜï First commit - deploying frontend"
          echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
        elif git diff HEAD~1 HEAD --name-only | grep -q "frontend/"; then
          echo "üìù Frontend files changed"
          echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
        else
          echo "‚úÖ Frontend files unchanged"
          echo "FRONTEND_CHANGED=false" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Configure Frontend with API URL
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "‚öôÔ∏è Configuring frontend with API Gateway URL..."
        
        # Get API Gateway URL from Terraform output
        API_URL=$(terraform output -raw api_gateway_url)
        echo "üì° API Gateway URL: $API_URL"
        
        # Update app.html with the API Gateway URL
        sed -i "s|{{API_GATEWAY_URL}}|$API_URL|g" ../frontend/knowledge-base/app.html
        
        # Update budget.html with the API Gateway URL
        sed -i "s|{{API_GATEWAY_URL}}|$API_URL|g" ../frontend/budget-tracker/budget.html
        
        echo "‚úÖ Frontend configured with API URL: $API_URL"
    
    - name: Deploy Frontend to S3
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "üåê Deploying frontend files to S3..."
        BUCKET_NAME=$(terraform output -raw frontend_bucket_name)
        echo "üì¶ Uploading to: $BUCKET_NAME"
        
        aws s3 sync ../frontend/ s3://$BUCKET_NAME/ --delete
        
        echo "‚ú® Frontend files deployed successfully!"
    
    - name: Invalidate CloudFront Cache
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "üîÑ Invalidating CloudFront cache..."
        CDN_URL=$(terraform output -raw frontend_cdn_url)
        
        # Extract distribution ID from CDN URL
        CDN_DOMAIN=$(echo $CDN_URL | sed 's|https://||')
        CDN_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$CDN_DOMAIN'].Id" --output text 2>/dev/null || echo "")
        
        if [ ! -z "$CDN_ID" ]; then
          aws cloudfront create-invalidation --distribution-id $CDN_ID --paths "/*" 2>/dev/null || echo "‚ö†Ô∏è Cache invalidation skipped"
        else
          echo "‚ö†Ô∏è Could not find CloudFront distribution"
        fi
        
        echo "üåê Frontend deployed at: $CDN_URL"
    
    - name: Skip Frontend Deployment (No Changes)
      if: env.FRONTEND_CHANGED == 'false'
      run: |
        echo "‚è≠Ô∏è  Frontend files unchanged - skipping deployment"
        echo "‚úÖ Previous frontend deployment remains active"
    
    - name: Get Frontend URL
      working-directory: ./infrastructure
      run: |
        # Check if CloudFront is enabled
        ENABLE_CLOUDFRONT=$(terraform show -json 2>/dev/null | jq -r '.values.root_module.variable_values.enable_cloudfront // "false"' || echo "false")
        
        if [ "$ENABLE_CLOUDFRONT" = "true" ]; then
          FRONTEND_URL=$(terraform output -raw frontend_cdn_url)
          echo "üåê Using CloudFront URL: $FRONTEND_URL"
        else
          FRONTEND_URL=$(terraform output -raw frontend_s3_url)
          echo "üåê Using S3 Website URL: $FRONTEND_URL"
        fi
        
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        echo "ENABLE_CLOUDFRONT=$ENABLE_CLOUDFRONT" >> $GITHUB_ENV
      continue-on-error: true
    
    - name: Verify Frontend is Reachable
      working-directory: ./infrastructure
      run: |
        echo "‚úÖ Verifying frontend is accessible..."
        echo "üåê Frontend URL: $FRONTEND_URL"
        
        # S3 website endpoints are instant, CloudFront takes time
        if [ "$ENABLE_CLOUDFRONT" = "true" ]; then
          # Set timeout based on whether it's new or update
          if [ "$NEW_CLOUDFRONT" = "false" ]; then
            echo "‚úÖ CloudFront update - checking reachability (2 min max)"
            MAX_ATTEMPTS=24  # 24 attempts √ó 5s = 2 minutes
          else
            echo "üÜï New CloudFront - checking reachability (5 min max)"
            MAX_ATTEMPTS=60  # 60 attempts √ó 5s = 5 minutes
          fi
          
          # Simple HTTP check
          SUCCESS=false
          for i in $(seq 1 $MAX_ATTEMPTS); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" --max-time 5 2>&1 || echo "000")
            
            # Clean up curl error messages
            HTTP_CODE=$(echo "$HTTP_CODE" | grep -oE "[0-9]{3}" | tail -1 || echo "000")
            
            echo "‚è±Ô∏è  Attempt $i/$MAX_ATTEMPTS: HTTP $HTTP_CODE"
            
            # Success if we get a valid HTTP response (even 403/404 means it's deployed)
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "403" ] || [ "$HTTP_CODE" = "404" ]; then
              echo ""
              echo "‚úÖ Frontend is reachable! (HTTP $HTTP_CODE)"
              SUCCESS=true
              break
            fi
            
            sleep 5
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo ""
            echo "‚ö†Ô∏è Warning: Frontend verification timed out, but deployment may still be in progress"
            echo "‚è±Ô∏è  CloudFront can take up to 15 minutes to fully propagate"
          fi
        else
          echo "‚úÖ S3 website endpoint is instantly available"
        fi
        
        echo "üéâ Deployment complete!"
        echo "üåê Frontend URL: $FRONTEND_URL"
        echo "üè† Home Hub: $FRONTEND_URL/index.html"
        echo "üìö Knowledge Base: $FRONTEND_URL/knowledge-base/app.html"
        echo "üìä Budget Tracker: $FRONTEND_URL/budget-tracker/budget.html"
        echo "üìä Grafana: $FRONTEND_URL/knowledge-base/grafana.html"

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources
      working-directory: ./infrastructure
      run: |
        echo "üîç Importing existing resources before destroy..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase || true
        terraform import aws_iam_role.lambda_role pkb-lambda-execution-role || true
        terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access || true
        terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch || true
        terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base || true
      continue-on-error: true
    
    - name: Cleanup AWS Resources
      working-directory: .
      run: |
        BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "pkb-frontend-personal-knowledge-base")
        ./scripts/cleanup-aws-resources.sh "$BUCKET"
      continue-on-error: true
    
    - name: Terraform Destroy
      working-directory: ./infrastructure
      run: terraform destroy -auto-approve
      continue-on-error: true
    
    - name: Force Cleanup (if needed)
      if: failure()
      run: |
        echo "üßπ Force cleaning remaining resources..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Try to delete policy manually
        aws iam delete-policy --policy-arn "arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access" 2>/dev/null || echo "Policy already deleted"
        
        # Try to delete user manually
        aws iam delete-user --user-name pkb-grafana-cloudwatch 2>/dev/null || echo "User already deleted"

  notify:
    name: Notify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        external-id: ${{ secrets.AWS_EXTERNAL_ID }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Success
      if: needs.deploy.result == 'success'
      working-directory: ./infrastructure
      run: |
        echo "‚úÖ Deployment successful!"
        echo ""
        
        # Get URLs
        API_URL=$(terraform output -raw api_gateway_url || echo "N/A")
        
        # Check if CloudFront is enabled
        ENABLE_CLOUDFRONT=$(terraform show -json 2>/dev/null | jq -r '.values.root_module.variable_values.enable_cloudfront // "false"' || echo "false")
        
        if [ "$ENABLE_CLOUDFRONT" = "true" ]; then
          FRONTEND_URL=$(terraform output -raw frontend_cdn_url)
          echo "üåê Frontend (CloudFront): $FRONTEND_URL"
        else
          FRONTEND_URL=$(terraform output -raw frontend_s3_url)
          echo "üåê Frontend (S3 Website): $FRONTEND_URL"
        fi
        
        echo "üîó API Gateway: $API_URL"
        echo ""
        echo "Applications:"
        echo "  üìö Knowledge Base: $FRONTEND_URL/knowledge-base/app.html"
        echo "  üìä Budget Tracker: $FRONTEND_URL/budget-tracker/budget.html"
        echo "  üìä Grafana: $FRONTEND_URL/knowledge-base/grafana.html"
    
    - name: Failure
      if: needs.deploy.result == 'failure'
      run: echo "‚ùå Deployment failed!"
