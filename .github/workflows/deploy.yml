name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy or destroy)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: latest

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: serverless-app
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Terraform Format Check
      working-directory: ./infrastructure
      run: terraform fmt -check -diff
      continue-on-error: true
    
    - name: Terraform Validate
      working-directory: ./infrastructure
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: terraform plan -detailed-exitcode
      continue-on-error: true

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Lambda Packages
      uses: actions/cache@v3
      id: lambda-cache
      with:
        path: |
          lambda-functions/*/function.zip
          budget-tracker/lambda-functions/*/function.zip
        key: lambda-${{ runner.os }}-${{ hashFiles('lambda-functions/**/*.py', 'lambda-functions/**/requirements.txt', 'budget-tracker/lambda-functions/**/*.py', 'budget-tracker/lambda-functions/**/requirements.txt') }}
    
    - name: Build Lambda Functions (Optimized)
      if: steps.lambda-cache.outputs.cache-hit != 'true'
      run: |
        chmod +x scripts/build-lambda.sh
        ./scripts/build-lambda.sh
        
        echo "📊 Package sizes:"
        du -h lambda-functions/*/function.zip
    
    - name: Verify Lambda Packages
      run: |
        ls -lah lambda-functions/*/function.zip
        TOTAL_SIZE=$(du -ch lambda-functions/*/function.zip | tail -1)
        echo "✅ Lambda packages ready ($TOTAL_SIZE)"
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Cleanup Old CloudFront Distributions
      run: |
        echo "🧹 Cleaning up old CloudFront distributions..."
        chmod +x scripts/cleanup-old-cloudfront.sh
        ./scripts/cleanup-old-cloudfront.sh || echo "⚠️ Cleanup failed, continuing..."
      continue-on-error: true

    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources (Skip if in state)
      working-directory: ./infrastructure
      run: |
        echo "🔍 Checking and importing existing resources..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Lambda Functions (CRITICAL - prevents hanging!)
        echo "⚡ Importing Lambda functions..."
        terraform state show aws_lambda_function.get_items &>/dev/null || terraform import aws_lambda_function.get_items pkb-api-get-items 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_function.create_item &>/dev/null || terraform import aws_lambda_function.create_item pkb-api-create-item 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_function.delete_item &>/dev/null || terraform import aws_lambda_function.delete_item pkb-api-delete-item 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_function.add_transaction &>/dev/null || terraform import aws_lambda_function.add_transaction budget-tracker-add-transaction 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_function.get_balance &>/dev/null || terraform import aws_lambda_function.get_balance budget-tracker-get-balance 2>/dev/null || echo "⚠️ Skipped"
        
        # Lambda Permissions
        echo "🔐 Importing Lambda permissions..."
        terraform state show aws_lambda_permission.api_gateway_get_items &>/dev/null || terraform import aws_lambda_permission.api_gateway_get_items pkb-api-get-items/AllowExecutionFromAPIGateway 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_permission.api_gateway_create_item &>/dev/null || terraform import aws_lambda_permission.api_gateway_create_item pkb-api-create-item/AllowExecutionFromAPIGateway 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_lambda_permission.api_gateway_delete_item &>/dev/null || terraform import aws_lambda_permission.api_gateway_delete_item pkb-api-delete-item/AllowExecutionFromAPIGateway 2>/dev/null || echo "⚠️ Skipped"
        
        # DynamoDB Tables
        echo "📦 Importing DynamoDB tables..."
        terraform state show aws_dynamodb_table.knowledge_base &>/dev/null || terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_dynamodb_table.budget_tracker &>/dev/null || terraform import aws_dynamodb_table.budget_tracker BudgetTracker 2>/dev/null || echo "⚠️ Skipped"
        
        # IAM Roles
        echo "🔑 Importing IAM roles..."
        terraform state show aws_iam_role.lambda_role &>/dev/null || terraform import aws_iam_role.lambda_role pkb-lambda-execution-role 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_iam_role.budget_tracker_lambda &>/dev/null || terraform import aws_iam_role.budget_tracker_lambda budget-tracker-lambda-role 2>/dev/null || echo "⚠️ Skipped"
        
        # IAM Policies
        echo "📝 Importing IAM policies..."
        terraform state show aws_iam_policy.grafana_cloudwatch_access &>/dev/null || terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access 2>/dev/null || echo "⚠️ Skipped"
        
        # IAM User
        echo "👤 Importing IAM users..."
        terraform state show aws_iam_user.grafana_cloudwatch &>/dev/null || terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch 2>/dev/null || echo "⚠️ Skipped"
        
        # S3 Bucket
        echo "🪣 Importing S3 bucket..."
        terraform state show aws_s3_bucket.frontend &>/dev/null || terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base 2>/dev/null || echo "⚠️ Skipped"
        
        # CloudFront Distribution (if exists)
        echo "☁️ Checking for existing CloudFront distributions..."
        DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='Personal Knowledge Base Frontend' && Status=='Deployed'].Id | [0]" --output text 2>/dev/null || echo "")
        if [ -n "$DIST_ID" ] && [ "$DIST_ID" != "null" ]; then
          echo "☁️ Found existing CloudFront distribution: $DIST_ID"
          terraform state show aws_cloudfront_distribution.frontend &>/dev/null || terraform import aws_cloudfront_distribution.frontend "$DIST_ID" 2>/dev/null || echo "⚠️ Skipped CloudFront import"
        fi
        
        echo "✅ Import check completed"
      continue-on-error: true
    
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: |
        echo "📋 Running terraform plan to see what will change..."
        terraform plan -refresh=false
      continue-on-error: true
    
    - name: Terraform Plan (for optimization checks)
      working-directory: ./infrastructure
      run: |
        echo "📋 Running terraform plan for optimization checks..."
        terraform plan -out=tfplan -refresh=false -parallelism=10 > plan.txt 2>&1 || true
        cat plan.txt
        
        # Check if CloudFront will be created (not just updated)
        if grep -q "aws_cloudfront_distribution.frontend will be created" plan.txt; then
          echo "🆕 New CloudFront distribution detected"
          echo "NEW_CLOUDFRONT=true" >> $GITHUB_ENV
        else
          echo "✅ CloudFront will be updated (not created)"
          echo "NEW_CLOUDFRONT=false" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Terraform Apply (No Refresh)
      working-directory: ./infrastructure
      run: |
        echo "⏱️ Starting terraform apply at $(date)"
        if [ -f tfplan ]; then
          time terraform apply tfplan
          rm -f plan.txt
        else
          time terraform apply -auto-approve -refresh=false -parallelism=10
        fi
        echo "✅ Completed terraform apply at $(date)"
    
    - name: Check if Frontend Changed
      run: |
        # Check if this is the first commit or if frontend changed
        if [ "$(git rev-list --count HEAD)" -eq 1 ]; then
          echo "🆕 First commit - deploying frontend"
          echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
        elif git diff HEAD~1 HEAD --name-only | grep -q "frontend/"; then
          echo "📝 Frontend files changed"
          echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
        else
          echo "✅ Frontend files unchanged"
          echo "FRONTEND_CHANGED=false" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Configure Frontend with API URL
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "⚙️ Configuring frontend with API Gateway URL..."
        
        # Get API Gateway URL from Terraform output
        API_URL=$(terraform output -raw api_gateway_url)
        echo "📡 API Gateway URL: $API_URL"
        
        # Update app.html with the API Gateway URL
        sed -i "s|{{API_GATEWAY_URL}}|$API_URL|g" ../frontend/app.html
        
        echo "✅ Frontend configured with API URL: $API_URL"
    
    - name: Deploy Frontend to S3
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "🌐 Deploying frontend files to S3..."
        BUCKET_NAME=$(terraform output -raw frontend_bucket_name)
        echo "📦 Uploading to: $BUCKET_NAME"
        
        aws s3 sync ../frontend/ s3://$BUCKET_NAME/ --delete
        
        echo "✨ Frontend files deployed successfully!"
    
    - name: Invalidate CloudFront Cache
      if: env.FRONTEND_CHANGED == 'true' || github.event_name == 'workflow_dispatch'
      working-directory: ./infrastructure
      run: |
        echo "🔄 Invalidating CloudFront cache..."
        CDN_URL=$(terraform output -raw frontend_cdn_url)
        
        # Extract distribution ID from CDN URL
        CDN_DOMAIN=$(echo $CDN_URL | sed 's|https://||')
        CDN_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$CDN_DOMAIN'].Id" --output text 2>/dev/null || echo "")
        
        if [ ! -z "$CDN_ID" ]; then
          aws cloudfront create-invalidation --distribution-id $CDN_ID --paths "/*" 2>/dev/null || echo "⚠️ Cache invalidation skipped"
        else
          echo "⚠️ Could not find CloudFront distribution"
        fi
        
        echo "🌐 Frontend deployed at: $CDN_URL"
    
    - name: Skip Frontend Deployment (No Changes)
      if: env.FRONTEND_CHANGED == 'false'
      run: |
        echo "⏭️  Frontend files unchanged - skipping deployment"
        echo "✅ Previous frontend deployment remains active"
    
    - name: Wait for CloudFront Deployment
      if: env.NEW_CLOUDFRONT == 'true' || env.NEW_CLOUDFRONT == ''
      working-directory: ./infrastructure
      run: |
        echo "⏳ Waiting for CloudFront to be fully deployed..."
        
        # If updating existing CloudFront, wait only 2 minutes
        if [ "$NEW_CLOUDFRONT" = "false" ]; then
          echo "✅ CloudFront update detected - using short wait (2 minutes)"
          TIMEOUT=120
        else
          echo "🆕 New CloudFront detected - using full wait (20 minutes)"
          TIMEOUT=1200
        fi
        
        # Get CloudFront distribution ID and URL
        CDN_URL=$(terraform output -raw frontend_cdn_url)
        CDN_DOMAIN=$(echo $CDN_URL | sed 's|https://||')
        
        # Extract distribution ID from CDN domain (e.g., d12345.cloudfront.net)
        echo "🔍 Looking for distribution with domain: $CDN_DOMAIN"
        DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$CDN_DOMAIN'].Id" --output text 2>/dev/null || echo "")
        
        if [ -z "$DIST_ID" ]; then
          echo "⚠️  Could not find CloudFront distribution ID"
          echo "🌐 CDN URL: $CDN_URL"
          echo "🌐 Looking for domain: $CDN_DOMAIN"
          echo "💡 Listing all distributions:"
          aws cloudfront list-distributions --query "DistributionList.Items[*].[Id,DomainName,Status]" --output table
          echo "⚠️  Proceeding anyway - CDN may still be deploying"
          exit 0
        fi
        
        echo "✅ Found distribution: $DIST_ID"
        
        # Set timeout based on whether it's new or update
        if [ "$NEW_CLOUDFRONT" = "false" ]; then
          echo "💡 This is an update - using 2-minute timeout"
        else
          echo "💡 This is a new distribution - using 20-minute timeout"
        fi
        
        ELAPSED=0
        INTERVAL=15  # Check every 15 seconds
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          STATUS=$(aws cloudfront get-distribution --id $DIST_ID --query 'Distribution.Status' --output text 2>/dev/null || echo "Unknown")
          
          echo "⏱️  Status: $STATUS (${ELAPSED}s elapsed)"
          
          if [ "$STATUS" = "Deployed" ]; then
            echo "✅ CloudFront deployment complete!"
            
            # Verify URL is reachable
            echo "🔍 Verifying CDN URL is reachable..."
            for i in {1..10}; do
              if curl -s -o /dev/null -w "%{http_code}" "$CDN_URL" | grep -q "200"; then
                echo "✅ CDN is reachable and responding!"
                break
              elif [ $i -eq 10 ]; then
                echo "⚠️  CDN deployment complete but not yet fully reachable"
              else
                echo "⏳ Attempt $i/10: Waiting for CDN..."
                sleep 5
              fi
            done
            
            echo ""
            echo "🎉 Deployment successful!"
            echo "🌐 CDN URL: $CDN_URL"
            echo "📚 Knowledge Base: $CDN_URL/app.html"
            echo "📊 Grafana: $CDN_URL/grafana.html"
            exit 0
          fi
          
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        
        echo "⚠️  Timeout waiting for CloudFront deployment status (20 minutes)"
        echo "CDN URL: $CDN_URL"
        echo "⚠️  CloudFront might still be deploying. The app should be accessible now."
        echo "🌐 Try accessing: $CDN_URL"
        exit 0

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources
      working-directory: ./infrastructure
      run: |
        echo "🔍 Importing existing resources before destroy..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase || true
        terraform import aws_iam_role.lambda_role pkb-lambda-execution-role || true
        terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access || true
        terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch || true
        terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base || true
      continue-on-error: true
    
    - name: Cleanup AWS Resources
      working-directory: .
      run: |
        BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "pkb-frontend-personal-knowledge-base")
        ./scripts/cleanup-aws-resources.sh "$BUCKET"
      continue-on-error: true
    
    - name: Terraform Destroy
      working-directory: ./infrastructure
      run: terraform destroy -auto-approve
      continue-on-error: true
    
    - name: Force Cleanup (if needed)
      if: failure()
      run: |
        echo "🧹 Force cleaning remaining resources..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Try to delete policy manually
        aws iam delete-policy --policy-arn "arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access" 2>/dev/null || echo "Policy already deleted"
        
        # Try to delete user manually
        aws iam delete-user --user-name pkb-grafana-cloudwatch 2>/dev/null || echo "User already deleted"

  notify:
    name: Notify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Success
      if: needs.deploy.result == 'success'
      run: echo "✅ Deployment successful!"
    
    - name: Failure
      if: needs.deploy.result == 'failure'
      run: echo "❌ Deployment failed!"
