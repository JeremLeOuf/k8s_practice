name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy or destroy)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: latest

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Terraform Format Check
      working-directory: ./infrastructure
      run: terraform fmt -check -diff
      continue-on-error: true
    
    - name: Terraform Validate
      working-directory: ./infrastructure
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: terraform plan -detailed-exitcode
      continue-on-error: true

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Cache Lambda Packages
      uses: actions/cache@v3
      id: lambda-cache
      with:
        path: |
          lambda-functions/*/function.zip
        key: lambda-${{ runner.os }}-${{ hashFiles('lambda-functions/**/*.py', 'lambda-functions/**/requirements.txt') }}
    
    - name: Build Lambda Functions
      if: steps.lambda-cache.outputs.cache-hit != 'true'
      run: |
        chmod +x scripts/build-lambda.sh
        ./scripts/build-lambda.sh
    
    - name: Verify Lambda Packages
      run: |
        ls -lah lambda-functions/*/function.zip
        echo "✅ Lambda packages ready"
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          infrastructure/.terraform
          infrastructure/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources (Skip if in state)
      working-directory: ./infrastructure
      run: |
        echo "🔍 Checking existing resources..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Only import if not already in state
        terraform state show aws_dynamodb_table.knowledge_base &>/dev/null || terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_iam_role.lambda_role &>/dev/null || terraform import aws_iam_role.lambda_role pkb-lambda-execution-role 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_iam_policy.grafana_cloudwatch_access &>/dev/null || terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_iam_user.grafana_cloudwatch &>/dev/null || terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch 2>/dev/null || echo "⚠️ Skipped"
        terraform state show aws_s3_bucket.frontend &>/dev/null || terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base 2>/dev/null || echo "⚠️ Skipped"
        
        echo "✅ Import check completed"
      continue-on-error: true
    
    - name: Terraform Apply (No Refresh)
      working-directory: ./infrastructure
      run: terraform apply -auto-approve -refresh=false

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init
    
    - name: Import Existing Resources
      working-directory: ./infrastructure
      run: |
        echo "🔍 Importing existing resources before destroy..."
        export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        terraform import aws_dynamodb_table.knowledge_base PersonalKnowledgeBase || true
        terraform import aws_iam_role.lambda_role pkb-lambda-execution-role || true
        terraform import aws_iam_policy.grafana_cloudwatch_access arn:aws:iam::$ACCOUNT_ID:policy/pkb-grafana-cloudwatch-access || true
        terraform import aws_iam_user.grafana_cloudwatch pkb-grafana-cloudwatch || true
        terraform import aws_s3_bucket.frontend pkb-frontend-personal-knowledge-base || true
      continue-on-error: true
    
    - name: Empty S3 Bucket
      working-directory: ./infrastructure
      run: |
        BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "pkb-frontend-personal-knowledge-base")
        echo "🗑️ Emptying S3 bucket: $BUCKET"
        aws s3 rm "s3://$BUCKET" --recursive || echo "Bucket already empty"
    
    - name: Terraform Destroy
      working-directory: ./infrastructure
      run: terraform destroy -auto-approve

  notify:
    name: Notify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Success
      if: needs.deploy.result == 'success'
      run: echo "✅ Deployment successful!"
    
    - name: Failure
      if: needs.deploy.result == 'failure'
      run: echo "❌ Deployment failed!"
